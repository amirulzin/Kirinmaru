ext {

    kotlinStdLib = "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    kotlinStdLib7 = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    kotlinStdLib8 = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    commonsIoVer = '2.6'; commonsIo = new DString('commons-io', 'commons-io', commonsIoVer).toString()
    gsonVer = '2.8.5'; gson = new DString('com.google.code.gson', 'gson', gsonVer).toString()
    jsoupVer = '1.11.3'; jsoup = new DString('org.jsoup', 'jsoup', jsoupVer).toString()
    jUnitVer = '4.12'; jUnit = new DString('junit', 'junit', jUnitVer).toString()
    rxJavaVer = '2.2.8'; rxJava = new DString('io.reactivex.rxjava2', 'rxjava', rxJavaVer).toString()
    rxAndroidVer = '2.1.1'; rxAndroid = new DString('io.reactivex.rxjava2', 'rxandroid', rxAndroidVer).toString()
    rxKotlinVer = '2.3.0'; rxKotlin = new DString('io.reactivex.rxjava2', 'rxkotlin', rxKotlinVer).toString()

    archLifecycleVer = '1.1.1'; _archLifecycle = new DString('android.arch.lifecycle', archLifecycleVer)
    archLifecycle = [
            runtime        : _archLifecycle.art('runtime'), //lightweight without LiveData and ViewModel
            extensions     : _archLifecycle.art('extensions'), //both LiveData and ViewModel
            livedata       : _archLifecycle.art('livedata'),
            viewmodel      : _archLifecycle.art('viewmodel'),
            reactivestreams: _archLifecycle.art('reactivestreams'),
            common_java8   : _archLifecycle.art('common-java8'),
    ]

    roomVer = '1.1.1'; _room = new DString('android.arch.persistence.room', roomVer)
    room = [
            runtime : _room.art('runtime'),
            compiler: _room.art('compiler'),
            rxjava2: _room.art('rxjava2')
    ]

    //DI
    daggerVer = '2.21'; _dagger = new DString("com.google.dagger", daggerVer)
    dagger = [
            dagger                : _dagger.art('dagger'),
            daggerCompiler        : _dagger.art('dagger-compiler'),
            daggerAndroid         : _dagger.art('dagger-android'),
            daggerAndroidSupport  : _dagger.art('dagger-android-support'),
            daggerAndroidProcessor: _dagger.art('dagger-android-processor')
    ]

    okHttpVer = '3.14.0'; _okHttp = new DString('com.squareup.okhttp3', okHttpVer)
    okHttp = [
            okHttp : _okHttp.art('okhttp'),
            logging: _okHttp.art('logging-interceptor')
    ]

    retrofitVer = '2.5.0'; _retrofit2 = new DString('com.squareup.retrofit2', retrofitVer)
    retrofit2 = [
            retrofit      : _retrofit2.art('retrofit'),
            adapterRxJava2: _retrofit2.art('adapter-rxjava2'),
            converterGson : _retrofit2.art('converter-gson')
    ]

    supportLibVer = "28.0.0"; _androidSupport = new DString("com.android.support", supportLibVer)
    supportLib = [
            annotations            : _androidSupport.art('support-annotations'),
            appcompat_v7           : _androidSupport.art('appcompat-v7'),
            cardview_v7            : _androidSupport.art('cardview-v7'),
            design                 : _androidSupport.art("design"),
            preference_v7          : _androidSupport.art('preference-v7'),
            preference_v14         : _androidSupport.art('preference-v14'),
            recyclerview_v7        : _androidSupport.art("recyclerview-v7"),
            support_vector_drawable: _androidSupport.art('support-vector-drawable'),
    ]
}

class DString {
    String grp, art, ver

    DString(grp, ver) { this.grp = grp; this.ver = ver }

    DString(grp, art, ver) { this.grp = grp; this.art = art; this.ver = ver }

    String art(art) { this.art = art; this.toString() }

    @Override
    String toString() { "$grp:$art:$ver" }
}